---
// ClassSessionCard.astro
interface Props {
  title: string;
  sessionNumber: number;
  classCode: string;
  timeSlot: string;
  isOngoing?: boolean;
}

const { title, sessionNumber, classCode, timeSlot, isOngoing = false } = Astro.props;
---

<div class="font-sans bg-white rounded-2xl p-5 border-solid border-1 border-slate-200 max-w-[450px] flex-1 relative">
  {isOngoing && <div class="text-red-600 font-bold mb-1 text-base">ONGOING NOW</div>}
  
  <h2 class="text-2xl font-bold mt-1 mb-4 text-[#212121]">{title}</h2>
  
  <div class="flex flex-col gap-2 mb-4">
    <div class="flex items-center gap-2 text-gray-600">
      <span class="text-[#888888] text-base w-6 h-6 flex items-center justify-center">📝</span>
      <span>Session {sessionNumber}</span>
    </div>
    <div class="flex items-center gap-2 text-gray-600">
      <span class="text-[#888888] text-base w-6 h-6 flex items-center justify-center">📍</span>
      <span>{classCode}</span>
    </div>
    <div class="flex items-center gap-2 text-gray-600">
      <span class="text-[#888888] text-base w-6 h-6 flex items-center justify-center">🕒</span>
      <span>{timeSlot}</span>
    </div>
  </div>

  {isOngoing && (
    <>
      <button 
        id="attendButton" 
        class="w-full bg-red-100 py-3 px-4 rounded-3xl flex items-center justify-center gap-2 font-medium mt-3 transition-all duration-200 ease-in-out cursor-pointer border-none hover:bg-red-200 [&.attended]:bg-green-100 [&.attended]:hover:bg-green-200"
      >
        <span class="font-bold">⊙</span> {/* Original .attend-icon had font-weight: bold */}
        <span id="buttonText">Attend Ongoing Class</span>
      </button>
      <div 
        id="errorMessage" 
        class="bg-red-100 text-red-600 p-3 rounded-xl mt-3 border border-red-200 text-center font-medium text-xs animate-fadeIn"
        style="display: none;"
      >
        You must be in the classroom. 
      </div>
    </>
  )}
</div>

<script>
  // Script remains the same. It manipulates IDs and the 'attended' class.
  // The Tailwind arbitrary variant '[&.attended]:...' will correctly style based on this class.
  document.addEventListener('DOMContentLoaded', () => {
    const attendButton = document.getElementById('attendButton');
    const buttonText = document.getElementById('buttonText');
    const errorMessage = document.getElementById('errorMessage');
    
    if (attendButton) {
      attendButton.addEventListener('click', () => {
        if (attendButton.classList.contains('attended')) {
          attendButton.classList.remove('attended');
          if (buttonText) buttonText.textContent = 'Attend Ongoing Class';
          if (errorMessage) errorMessage.style.display = 'none';
          return;
        }
        
        const isSuccess = Math.random() < 0.5;
        
        if (isSuccess) {
          attendButton.classList.add('attended');
          if (buttonText) buttonText.textContent = 'Attended Ongoing Class';
          if (errorMessage) errorMessage.style.display = 'none';
        } else {
          // Ensure button doesn't get 'attended' class if it failed
          attendButton.classList.remove('attended'); 
          if (buttonText) buttonText.textContent = 'Attend Ongoing Class';

          if (errorMessage) {
            errorMessage.style.display = 'block';
            setTimeout(() => {
              errorMessage.style.display = 'none';
            }, 3000);
          }
        }
      });
    }
  });
</script>

<!-- 
  Tailwind Configuration for Animation (e.g., in tailwind.config.js or tailwind.config.cjs):

  module.exports = {
    // ... other configurations
    theme: {
      extend: {
        keyframes: {
          fadeIn: {
            '0%': { opacity: '0', transform: 'translateY(-10px)' },
            '100%': { opacity: '1', transform: 'translateY(0)' },
          }
        },
        animation: {
          fadeIn: 'fadeIn 0.3s ease-in', // Matches original animation
        }
      },
    },
    plugins: [
      // ... other plugins
    ],
  }
-->