---
// ClassSessionCard.astro
interface Props {
  title: string;
  sessionNumber: number;
  classCode: string;
  timeSlot: string;
  isOngoing?: boolean;
}

const { title, sessionNumber, classCode, timeSlot, isOngoing = false } = Astro.props;
---

<div class="class-session-card">
  {isOngoing && <div class="ongoing-badge">ONGOING NOW</div>}
  <h2 class="title">{title}</h2>
  <div class="details">
    <div class="detail-item">
      <span class="icon">üìù</span>
      <span>Session {sessionNumber}</span>
    </div>
    <div class="detail-item">
      <span class="icon">üìç</span>
      <span>{classCode}</span>
    </div>
    <div class="detail-item">
      <span class="icon">üïí</span>
      <span>{timeSlot}</span>
    </div>
  </div>
  {isOngoing && (
    <>
      <button id="attendButton" class="attend-button">
        <span class="attend-icon">‚äô</span>
        <span id="buttonText">Attend Ongoing Class</span>
      </button>
      <div id="errorMessage" class="error-message text-xs" style="display: none;">
        You are not in the range for attendance. Please go near the class for this subject!
      </div>
    </>
  )}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const attendButton = document.getElementById('attendButton');
    const buttonText = document.getElementById('buttonText');
    const errorMessage = document.getElementById('errorMessage');
    
    if (attendButton) {
      attendButton.addEventListener('click', () => {
        if (attendButton.classList.contains('attended')) {
          attendButton.classList.remove('attended');
          buttonText.textContent = 'Attend Ongoing Class';
          errorMessage.style.display = 'none';
          return;
        }
        
        const isSuccess = Math.random() < 0.5;
        
        if (isSuccess) {
          attendButton.classList.add('attended');
          buttonText.textContent = 'Attended Ongoing Class';
          errorMessage.style.display = 'none';
        } else {
          errorMessage.style.display = 'block';
          setTimeout(() => {
            errorMessage.style.display = 'none';
          }, 3000);
        }
      });
    }
  });
</script>

<style>
  .class-session-card {
    background-color: #ffffff;
    border-radius: 24px;
    padding: 1rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    max-width: 450px;
    position: relative;
  }

  .ongoing-badge {
    color: #e94335;
    font-weight: bold;
    margin-bottom: 0.25rem;
    font-size: 1rem;
  }

  .title {
    font-size: 1.5rem;
    font-weight: bold;
    margin: 0.25rem 0 1rem 0;
    color: #212121;
  }

  .details {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #666666;
  }

  .icon {
    color: #888888;
    font-size: 1rem;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .attend-button {
    background-color: #ffcdd2;
    color: #212121;
    padding: 0.75rem 1rem;
    border-radius: 24px;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-weight: medium;
    margin-top: 0.75rem;
    transition: all 0.2s;
    border: none;
    cursor: pointer;
  }

  .attend-button:hover {
    background-color: #ffb3b3;
  }
  
  /* Attended state styles */
  .attend-button.attended {
    background-color: #a7e8a9;
  }
  
  .attend-button.attended:hover {
    background-color: #8edc91;
  }

  .attend-icon {
    font-weight: bold;
  }

  .error-message {
    background-color: #ffebee;
    color: #c62828;
    padding: 0.75rem;
    border-radius: 12px;
    margin-top: 0.75rem;
    border: 1px solid #ffcdd2;
    text-align: center;
    font-weight: medium;
    animation: fadeIn 0.3s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>